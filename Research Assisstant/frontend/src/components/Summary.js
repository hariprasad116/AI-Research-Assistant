import React, { useState } from 'react';

const SummaryBox = ({ summary, loading }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  if (loading) {
    return (
      <div style={styles.container}>
        <div style={styles.loadingContainer}>
          <div style={styles.spinner}></div>
          <p style={styles.loadingText}>AI is analyzing your text...</p>
        </div>
      </div>
    );
  }

  if (!summary) {
    return null;
  }

  // Split summary into bullet points if it contains line breaks or bullet points
  const formatSummary = (text) => {
    const lines = text.split('\n').filter(line => line.trim());
    if (lines.length > 1) {
      return lines.map((line, index) => (
        <li key={index} style={styles.listItem}>
          {line.replace(/^[-‚Ä¢*]\s*/, '')} {/* Remove existing bullet points */}
        </li>
      ));
    }
    return <li style={styles.listItem}>{text}</li>;
  };

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h3 style={styles.title}>üìù Key Points Summary</h3>
        <button
          onClick={handleCopy}
          style={{
            ...styles.copyButton,
            ...(copied ? styles.copiedButton : {})
          }}
        >
          {copied ? '‚úÖ Copied!' : 'üìã Copy'}
        </button>
      </div>
      
      <div style={styles.summaryContent}>
        <ul style={styles.list}>
          {formatSummary(summary)}
        </ul>
      </div>
      
      <div style={styles.footer}>
        <small style={styles.footerText}>
          üí° Summary generated by AI ‚Ä¢ Always verify important information
        </small>
      </div>
    </div>
  );
};

const styles = {
  container: {
    backgroundColor: 'white',
    borderRadius: '12px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    overflow: 'hidden'
  },
  loadingContainer: {
    padding: '3rem 2rem',
    textAlign: 'center'
  },
  spinner: {
    width: '40px',
    height: '40px',
    border: '4px solid #e5e7eb',
    borderTop: '4px solid #4f46e5',
    borderRadius: '50%',
    animation: 'spin 1s linear infinite',
    margin: '0 auto 1rem'
  },
  loadingText: {
    color: '#6b7280',
    fontSize: '1.1rem',
    margin: 0
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '1.5rem 2rem 1rem',
    borderBottom: '1px solid #e5e7eb'
  },
  title: {
    margin: 0,
    fontSize: '1.3rem',
    color: '#111827',
    fontWeight: '600'
  },
  copyButton: {
    padding: '0.5rem 1rem',
    backgroundColor: '#f3f4f6',
    border: '1px solid #d1d5db',
    borderRadius: '6px',
    fontSize: '0.9rem',
    cursor: 'pointer',
    transition: 'all 0.2s',
    color: '#374151'
  },
  copiedButton: {
    backgroundColor: '#10b981',
    color: 'white',
    borderColor: '#10b981'
  },
  summaryContent: {
    padding: '1.5rem 2rem'
  },
  list: {
    margin: 0,
    paddingLeft: '1.2rem',
    listStyleType: 'disc'
  },
  listItem: {
    marginBottom: '0.8rem',
    lineHeight: '1.6',
    color: '#374151',
    fontSize: '1rem'
  },
  footer: {
    padding: '1rem 2rem',
    backgroundColor: '#f9fafb',
    borderTop: '1px solid #e5e7eb'
  },
  footerText: {
    color: '#6b7280',
    margin: 0
  }
};

// Add CSS animation for spinner
const styleSheet = document.createElement("style");
styleSheet.type = "text/css";
styleSheet.innerText = `
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;
document.head.appendChild(styleSheet);

export default SummaryBox;